import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import random

# Укажите ваш токен
TOKEN = '7383941068:AAELJkcVfnKOj8voO5BafNjvfcQLnF-BWvk'
bot = telebot.TeleBot(TOKEN)


def create_empty_board(size=8):
    return [[' ' for _ in range(size)] for _ in range(size)]


def place_ships(board, ship_count=15):
    size = len(board)
    placed_ships = 0

    while placed_ships < ship_count:
        row = random.randint(0, size - 1)
        col = random.randint(0, size - 1)

        if board[row][col] == ' ':
            board[row][col] = 'O'
            placed_ships += 1

    return board

def check_win():
    global otvety, board
    for row in range(len(board)):
        for col in range(len(board[row])):
            if otvety[row][col] == 'O' and board[row][col] != '🚩':
                return False
    return True

def count_ships_around(row, col, board):
    count = 0
    size = len(board)
    for r in range(max(0, row - 1), min(size, row + 2)):
        for c in range(max(0, col - 1), min(size, col + 2)):
            if board[r][c] == 'O' and (r != row or c != col):
                count += 1
    return str(count)


def create_game_board(board):
    markup = InlineKeyboardMarkup(row_width=8)
    buttons = []
    for row in range(len(board)):
        for col in range(len(board[row])):
            text = board[row][col]
            if text == ' ':
                text = f'{row},{col}'
            elif text == 'x':
                text = '💣'
            elif text == '1':
                text = '1️⃣'
            elif text == '2':
                text = '2️⃣'
            elif text == '3':
                text = '3️⃣'
            elif text == '4':
                text = '4️⃣'
            elif text == '5':
                text = '5️⃣'
            elif text == '6':
                text = '6️⃣'
            elif text == '7':
                text = '7️⃣'
            elif text == '0':
                text = '0️⃣'
            buttons.append(InlineKeyboardButton(text, callback_data=f'{row},{col}'))
    markup.row(InlineKeyboardButton("Поставить флаг", callback_data="flag"))

    for i in range(0, len(buttons), 8):
        markup.row(*buttons[i:i + 8])
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    global otvety, board, hits_count, game_active
    try:
        bot.delete_message(message.chat.id, message.message_id - 2)
    except:
        pass
    board_with_ships = create_empty_board()
    otvety = place_ships(board_with_ships)
    hits_count = 0
    game_active = True
    board = create_empty_board()
    board_markup = create_game_board(board)
    bot.send_message(message.chat.id, "Добро пожаловать в игру 'Морской бой'!", reply_markup=board_markup)


@bot.callback_query_handler(func=lambda call: call.data == 'flag')
def handle_flag_query(call):
    try:
        bot.send_message(call.message.chat.id,
                         f"Введите координаты клетки для установки флага в формате 'строка,столбец' (например, 1,1):")

        bot.register_next_step_handler(call.message, process_flag_input)

    except Exception as e:
        print(f"Ошибка при обработке запроса на постановку флага: {e}")


def process_flag_input(message):
    flag_count = 0
    try:
        row, col = map(int, message.text.split(','))

        if 0 <= row < len(board) and 0 <= col < len(board[0]):

            board[row][col] = '🚩'
            flag_count += 1
            new_board = create_game_board(board)
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, message.message_id - 1)

            bot.edit_message_text('Флаг успешно поставлен', message.chat.id, message.message_id - 2,
                                  reply_markup=new_board)

        else:
            bot.send_message(message.chat.id, "Неверные координаты. Введите числа в допустимом диапазоне.")

        if flag_count == 15:
            if check_win():
                bot.send_message(message.chat.id, "Поздравляю, вы выиграли! Чтобы начать новую игру, введите /start.")
            else:
                bot.send_message(message.chat.id,
                                 "Вы проиграли! Не все флаги стоят на правильных местах. Чтобы начать новую игру, введите /start.")

    except ValueError:
        bot.send_message(message.chat.id, "Неверный формат координат. Введите числа через запятую (например, 1,1).")
    except Exception as e:
        print(f"Ошибка при обработке ввода координат: {e}")


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    global otvety, board, hits_count, game_active
    if not game_active:
        return
    if call.data == 'flag':
        return
    if call.data == '🚩':
        return
    row, col = map(int, call.data.split(','))
    try:
        if otvety[row][col] == 'O':
            board[row][col] = 'x'
            game_active = False
            bot.send_message(call.message.chat.id, "Вы проиграли! Чтобы начать новую игру, введите /start.")
            hits_count += 1
            bot.answer_callback_query(call.id, f"вы попали {row},{col}")
        elif otvety[row][col] == ' ':
            board[row][col] = count_ships_around(row, col, otvety)
    except:
        pass

    new_board = create_game_board(board)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=new_board)



bot.polling(none_stop=True)
