import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import random

# Укажите ваш токен
TOKEN = '7383941068:AAELJkcVfnKOj8voO5BafNjvfcQLnF-BWvk'
bot = telebot.TeleBot(TOKEN)


def create_empty_board(size=8):
    return [[' ' for _ in range(size)] for _ in range(size)]


def place_ships(board, ship_count=20):
    size = len(board)
    placed_ships = 0

    while placed_ships < ship_count:
        row = random.randint(0, size - 1)
        col = random.randint(0, size - 1)

        if board[row][col] == ' ':
            board[row][col] = 'O'
            placed_ships += 1

    return board


# Создание игрового поля 9x9
def create_game_board(board):
    markup = InlineKeyboardMarkup(row_width=8)
    buttons = []
    for row in range(len(board)):
        for col in range(len(board[row])):
            text = board[row][col]
            if text == ' ':
                text = f'{row},{col}'  # По умолчанию текст кнопки - координаты
            elif text == '0':
                text = '🟥'  # Желтый квадрат для промаха
            elif text == 'x':
                text = '🟩'  # Зеленый квадрат для попадания
            buttons.append(InlineKeyboardButton(text, callback_data=f'{row},{col}'))
    markup.row(InlineKeyboardButton("Поставить флаг", callback_data="flag"))

    for i in range(0, len(buttons), 8):
        markup.row(*buttons[i:i + 8])
    return markup


# Обработка команды /start
@bot.message_handler(commands=['start'])
def start(message):
    global otvety, board, hits_count
    board_with_ships = create_empty_board()
    otvety = place_ships(board_with_ships)
    hits_count = 0

    # Создаем пустое игровое поле для отображения и отправляем его пользователю
    board = create_empty_board()
    board_markup = create_game_board(board)
    bot.send_message(message.chat.id, "Добро пожаловать в игру 'Морской бой'!", reply_markup=board_markup)


@bot.callback_query_handler(func=lambda call: call.data == 'flag')
def handle_flag_query(call):
    try:
        bot.send_message(call.message.chat.id,
                         f"Введите координаты клетки для установки флага в формате 'строка,столбец' (например, 1,1):")

        # Определяем состояние пользователя для ввода координат
        bot.register_next_step_handler(call.message, process_flag_input)

    except Exception as e:
        print(f"Ошибка при обработке запроса на постановку флага: {e}")


# Функция для обработки ввода пользователя
def process_flag_input(message):
    try:
        # Парсим введенные координаты
        row, col = map(int, message.text.split(','))

        # Проверяем, что введенные координаты находятся в пределах игрового поля
        if 0 <= row < len(board) and 0 <= col < len(board[0]):

            board[row][col] = '🚩'  # Устанавливаем эмодзи флага
                
        else:
            bot.send_message(message.chat.id, "Неверные координаты. Введите числа в допустимом диапазоне.")

    except ValueError:
        bot.send_message(message.chat.id, "Неверный формат координат. Введите числа через запятую (например, 1,1).")
    except Exception as e:
        print(f"Ошибка при обработке ввода координат: {e}")


# Обработка нажатий на кнопки
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    global otvety, board, hits_count
    if call.data == 'flag':
        return
    row, col = map(int, call.data.split(','))

    if otvety[row][col] == 'O':
        board[row][col] = 'x'
        hits_count += 1
        bot.answer_callback_query(call.id, f"вы попали {row},{col}")
    elif otvety[row][col] == ' ':
        board[row][col] = '0'
        bot.answer_callback_query(call.id, f"вы примохнулись     {row},{col}")

    new_board = create_game_board(board)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=new_board)

    if hits_count == 20:
        bot.send_message(call.message.chat.id, "Поздравляю, вы выиграли! Чтобы начать новую игру, введите /start.")






# Запуск бота
bot.polling(none_stop=True)
